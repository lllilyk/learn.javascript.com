// 배열 메서드
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

// map : 배열의 각 요소에 대해 주어진 함수를 호출하고, 그 결과를 새로운 배열로 반환함. ★ map()은 기존 배열을 변경하지 않고, 새로운 배열을 반환!
  // ex1 -----------------------------------------------------------------------------------------------------------------------------
  const numbers = [1, 2, 3, 4];
  const doubled = numbers.map(num => num * 2);
  console.log(doubled); // [2, 4, 6, 8];

  // ex2 -----------------------------------------------------------------------------------------------------------------------------
  var kvArray = [
    { key:1, value: 10 },
    { key:2, value: 20 },
    { key:3, value: 30 }, 
  ];

  var reformattedArray = kvArray.map(function (obj) { // map함수는 배열의 각 요소에 대해 한 번씩 실행되는 함수로, 각 요소가 함수의 매개변수(obj)로 전달됨. 
    var rObj = {}; 
    rObj[obj.key] = obj.value; // 배열에서 대괄호[]를 사용할 때는 인덱스를 사용하지만, 객체에서 대괄호는 속성(property) 이름을 동적으로 지정할 때 사용함. 이 코드에서는 객체의 속성 이름을 동적으로 할당하기 위해서 사용됨. 
    return rObj;
  });
                                                                                                                                                                                                                                                                                                       
  console.log(reformattedArray); // [{1:10}, {2:20}, {3:30}]

  // ex3 까다로운 사례 -----------------------------------------------------------------------------------------------------------------
  ["1", "2", "3"].map(parseInt); // [1, NaN, NaN]
    // 1. map 함수
    // map 함수는 배열의 각 원소를 순회하면서 콜백 함수를 실행하고, 그 결과를 새 배열로 반환하는 함수.
    // 콜백 함수는 기본적으로 3개의 인자를 받을 수 있음 (현재 배열의 값(element), 현재 배열 값의 인덱스(index), 원본 배열(array))
    // 보통은 첫 번째 인자(현재 값)만 사용하는데, 인덱스도 두 번째 인자로 전달된다는 부분에서 혼란이 옴!

    // 2. parseInt 함수
    // parseInt는 문자열을 숫자로 변환하는 함수로, 이 함수는 두 개의 인자를 받을 수 있음.
    // 첫 번째 인자 : 변환할 문자열, 두 번째 인자 : 몇 진법으로 해석할지 결정하는 값(만약 두 번째 인자를 생략하면 기본적으로 10진법을 사용함)

    // 왜 NaN 값을 반환할까?
    // map은 parseInt를 호출할 때, 세 가지 인자를 전달함. 
    // parseInt("1", 0); // 첫 번째 원소 "1"과 인덱스 0을 전달
    // parseInt("2", 1); 
    // parseInt("3", 2);

    // 근데 parseInt의 두 번째 인자는 진법을 나타내기 때문에, parseInt가 map이 전달하는 3개의 인자 중 2개(두 번째 인자: 인덱스)를 받으면서 의도치 않은 결과가 발생할 수 있음
    // parseInt("1", 0); // 여기서 진법을 0으로 주면, 자바스크립트가 자동으로 10진법으로 해석함. => 결과 : 1
    // parseInt("2", 1); // 1진법은 존재하지 않으므로 이 경우에는 NaN을 반환함
    // parseInt("3", 2); // 2진법에서는 숫자 3이 유효하지 않기 때문에 NaN을 반환함

    // 올바른 해결 방법
    // 1. parseInt를 사용할 때, 진법을 명시적으로 설정하기(ex. 10진법)
    function returnInt(element) {
      return parseInt(element, 10);
    }

    // 2. 화살표 함수로 간결하게 작성
    ["1", "2", "3"].map((str) => parseInt(str, 10)); // [1, 2, 3]

    // 3. Number를 사용하는 방법 (Number는 진법을 따지지 않고 문자열을 숫자로 변환함)
    ["1", "2", "3"].map(Number); // [1, 2, 3]
      // Number는 소수점이나 지수 표현을 포함한 값도 변환할 수 있음
      ["1.1", "2.2e2", "3e300"].map(Number); // [1.1, 220, 3e+300]

  // ex4 -----------------------------------------------------------------------------------------------------------------------------
  var elems = document.querySelectorAll("select option:checked");
  var values = [].map.call(elems, function (obj) {
    return obj.value;
  });
  // 페이지에 있는 select 요소에서 선택된(option:checked) 요소들을 찾고, 그 값(value)들을 배열로 모아 반환하는 방식.
  // elems는 선택된 옵션들이 들어있는 NodeList.
  // [].map.call(elems, ...)는 배열의 map 메서드를 elems(NodeList)에서 실행하는 방법
    // map은 배열을 순회하면서 각 요소에 대해 콜백 함수를 실행하고, 그 결과를 새 배열에 담아서 반환하는 메서드
    // 여기서 각 option 요소의 value 속성을 가져와 반환하고, 이를 values라는 배열에 담음.

    // ▲ [].map.call(elems, function(obj))
    // [].map은 배열의 map 메서드를 사용하기 위해 배열의 프로토타입에서 map 메서드를 가져온 것.
    // call 메서드를 사용해서 map 메서드를 elems에 적용함. 원래 elems는 NodeList(배열이 아닌 유사 배열 객체)이므로 배열 메서드를 직접 사용하지 못하는데, call을 통해 이를 가능하게 만듦.
    // 즉, [].map.call(elems, ...)은 elems라는 NodeList에 배열의 map 메서드를 적용하는 것이며, 그 안에서 각 elems의 요소에 대해 콜백함수가 실행됨. 

// --------------------------------------------------------------------------------------------------------------------------------
// 그 외 설명

// 배열과 객체의 차이
// 배열(array) : 배열은 숫자 인덱스를 사용해서 항목에 접근함. 배열에서 []는 인덱스 번호를 이용해서 각 항목에 접근하거나 수정할 때 사용함.
var arr = [10, 20, 30];
console.log(arr[0]); // 10 : 배열의 0번 인덱스에 접근

// 객체(object) : 객체는 키-값 쌍으로 이루어져 있고, 속성(키)에 접근할 때는, .또는 []를 사용할 수 있음. 특히 [] 안에 문자열을 넣으면 속성 이름을 동적으로 지정할 수 있음.
var obj = { name: 'Alice', age: 25 };
console.log(obj.name); // Alice : 속성 name에 접근
console.log(obj['age']); // 25 : 속성 age에 접근

